import { useState, useEffect, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import {
  getUserTasks,
  createTask,
  deleteTask,
  toggleTaskStatus,
  // ‚ùå –£–î–ê–õ–Ø–ï–ú updateTask - —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç
} from "../services/api";
import "./TasksPage.css";

const TasksPage = () => {
  const navigate = useNavigate();
  const [tasks, setTasks] = useState([]);
  const [filteredTasks, setFilteredTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [filter, setFilter] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [showCreateForm, setShowCreateForm] = useState(false);

  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const [newTask, setNewTask] = useState({
    title: "",
    content: "", // ‚Üê content –≤–º–µ—Å—Ç–æ description
    priority: 1, // ‚Üê int –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ (1=–Ω–∏–∑–∫–∏–π, 2=—Å—Ä–µ–¥–Ω–∏–π, 3=–≤—ã—Å–æ–∫–∏–π)
  });

  const userId = localStorage.getItem("userId");

  const loadTasks = useCallback(async () => {
    try {
      setLoading(true);
      setError("");
      console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

      const userTasks = await getUserTasks(userId);
      setTasks(userTasks);
      console.log("‚úÖ –ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", userTasks);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", error);
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: " + error.message);
    } finally {
      setLoading(false);
    }
  }, [userId]);

  useEffect(() => {
    if (!userId) {
      navigate("/login");
      return;
    }
    loadTasks();
  }, [userId, navigate, loadTasks]);

  // ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
  useEffect(() => {
    let filtered = tasks;

    if (filter === "completed") {
      filtered = filtered.filter((task) => task.completed);
    } else if (filter === "pending") {
      filtered = filtered.filter((task) => !task.completed);
    }

    if (searchTerm) {
      filtered = filtered.filter(
        (task) =>
          task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (task.content &&
            task.content.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    setFilteredTasks(filtered);
  }, [tasks, filter, searchTerm]);

  // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
  const handleCreateTask = async (e) => {
    e.preventDefault();
    if (!newTask.title.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏");
      return;
    }

    // –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É userId
    if (!userId) {
      alert("–û—à–∏–±–∫–∞: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    console.log("üÜî userId –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", userId, "–¢–∏–ø:", typeof userId);

    try {
      const createdTask = await createTask(newTask, userId);
      setTasks([createdTask, ...tasks]);
      setNewTask({ title: "", content: "", priority: 1 });
      setShowCreateForm(false);
      console.log("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:", createdTask);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:", error);
      alert("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: " + error.message);
    }
  };

  // ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º updatedTask
  const handleToggleStatus = async (taskId, currentStatus) => {
    try {
      const updatedTask = await toggleTaskStatus(taskId, !currentStatus);
      setTasks(tasks.map((task) => (task.id === taskId ? updatedTask : task)));
      console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω:", updatedTask);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error);
      alert("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏");
    }
  };

  const handleDeleteTask = async (taskId) => {
    if (!window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?")) {
      return;
    }

    try {
      await deleteTask(taskId);
      setTasks(tasks.filter((task) => task.id !== taskId));
      console.log("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", error);
      alert("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏");
    }
  };

  const getTaskStats = () => {
    const total = tasks.length;
    const completed = tasks.filter((task) => task.completed).length;
    const pending = total - completed;
    const completionRate =
      total > 0 ? Math.round((completed / total) * 100) : 0;

    return { total, completed, pending, completionRate };
  };

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const getPriorityText = (priority) => {
    switch (priority) {
      case 1:
        return { text: "–ù–∏–∑–∫–∏–π", emoji: "üü¢", class: "priority-low" };
      case 2:
        return { text: "–°—Ä–µ–¥–Ω–∏–π", emoji: "üü°", class: "priority-medium" };
      case 3:
        return { text: "–í—ã—Å–æ–∫–∏–π", emoji: "üî¥", class: "priority-high" };
      default:
        return { text: "–°—Ä–µ–¥–Ω–∏–π", emoji: "üü°", class: "priority-medium" };
    }
  };

  const stats = getTaskStats();

  if (loading) {
    return (
      <div className="tasks-page">
        <div className="loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="tasks-page" data testid="tasks-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="tasks-header">
        <div className="header-top">
          <button className="back-button" onClick={() => navigate("/profile")}>
            ‚Üê –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é
          </button>
          <h1>üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏</h1>
          <button
            className="create-task-button"
            onClick={() => setShowCreateForm(true)}
          >
            ‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
          </button>
        </div>

        <div className="task-stats">
          <div className="stat-card">
            <span className="stat-number">{stats.total}</span>
            <span className="stat-label">–í—Å–µ–≥–æ</span>
          </div>
          <div className="stat-card">
            <span className="stat-number">{stats.completed}</span>
            <span className="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
          </div>
          <div className="stat-card">
            <span className="stat-number">{stats.pending}</span>
            <span className="stat-label">–í —Ä–∞–±–æ—Ç–µ</span>
          </div>
          <div className="stat-card">
            <span className="stat-number">{stats.completionRate}%</span>
            <span className="stat-label">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
          </div>
        </div>
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className="tasks-controls">
        <div className="filters">
          <button
            className={`filter-button ${filter === "all" ? "active" : ""}`}
            onClick={() => setFilter("all")}
          >
            –í—Å–µ –∑–∞–¥–∞—á–∏
          </button>
          <button
            className={`filter-button ${filter === "pending" ? "active" : ""}`}
            onClick={() => setFilter("pending")}
          >
            –í —Ä–∞–±–æ—Ç–µ
          </button>
          <button
            className={`filter-button ${
              filter === "completed" ? "active" : ""
            }`}
            onClick={() => setFilter("completed")}
          >
            –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
          </button>
        </div>

        <div className="search-box">
          <input
            type="text"
            className="search-input"
            placeholder="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      {/* –û—à–∏–±–∫–∏ */}
      {error && <div className="error-message">{error}</div>}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
      {showCreateForm && (
        <div className="create-task-modal">
          <div className="modal-content">
            <h3>‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</h3>
            <form onSubmit={handleCreateTask}>
              <input
                type="text"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                value={newTask.title}
                onChange={(e) =>
                  setNewTask({ ...newTask, title: e.target.value })
                }
                required
              />
              <textarea
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                value={newTask.content}
                onChange={(e) =>
                  setNewTask({ ...newTask, content: e.target.value })
                }
                rows="3"
              />
              <select
                value={newTask.priority}
                onChange={(e) =>
                  setNewTask({ ...newTask, priority: parseInt(e.target.value) })
                }
              >
                <option value={1}>üü¢ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
                <option value={2}>üü° –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
                <option value={3}>üî¥ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
              </select>

              <div className="modal-buttons">
                <button
                  type="button"
                  className="cancel-button"
                  onClick={() => setShowCreateForm(false)}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit" className="create-button">
                  –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
      <div className="tasks-list">
        {filteredTasks.length === 0 ? (
          <div className="empty-state">
            <h3>üìù –ù–µ—Ç –∑–∞–¥–∞—á</h3>
            <p>
              {tasks.length === 0
                ? "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!"
                : "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"}
            </p>
          </div>
        ) : (
          filteredTasks.map((task) => {
            const priorityInfo = getPriorityText(task.priority);
            return (
              <div
                key={task.id}
                className={`task-card ${task.completed ? "completed" : ""} ${
                  priorityInfo.class
                }`}
              >
                <div className="task-header">
                  <h3 className={task.completed ? "completed-text" : ""}>
                    {task.title}
                  </h3>
                  <span className="task-priority">{priorityInfo.emoji}</span>
                </div>

                {task.content && (
                  <div className="task-description">{task.content}</div>
                )}

                <div className="task-footer">
                  <span
                    className={`task-status ${
                      task.completed ? "completed" : "pending"
                    }`}
                  >
                    {task.completed ? "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" : "‚è≥ –í —Ä–∞–±–æ—Ç–µ"}
                  </span>

                  <div className="task-actions">
                    <button
                      className={`status-button ${
                        task.completed ? "mark-pending" : "mark-completed"
                      }`}
                      onClick={() =>
                        handleToggleStatus(task.id, task.completed)
                      }
                    >
                      {task.completed ? "–û—Ç–º–µ–Ω–∏—Ç—å" : "–í—ã–ø–æ–ª–Ω–∏—Ç—å"}
                    </button>

                    <button
                      className="delete-button"
                      onClick={() => handleDeleteTask(task.id)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
            );
          })
        )}
      </div>
    </div>
  );
};

export default TasksPage;
