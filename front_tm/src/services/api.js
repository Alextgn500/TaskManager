const API_URL = process.env.REACT_APP_API_URL || "http://localhost:8000";

// ===== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø =====
const loginUser = async (username, password) => {
  const response = await fetch(`${API_URL}/login`, {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
    },
    body: new URLSearchParams({
      username,
      password,
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
  }

  const data = await response.json();
  return data;
};

const registerUser = async (username, firstname, lastname, age, password) => {
  const response = await fetch(`${API_URL}/register`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      username,
      firstname,
      lastname,
      age,
      password,
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
  }

  const data = await response.json();
  return data;
};

// ===== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò =====
const getUserData = async (userId) => {
  const response = await fetch(`${API_URL}/users/${userId}`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }

  return response.json();
};

const updateUserData = async (userId, userData) => {
  try {
    console.log("üåê URL –∑–∞–ø—Ä–æ—Å–∞:", `${API_URL}/users/${userId}`);
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:", JSON.stringify(userData, null, 2));

    const response = await fetch(`${API_URL}/users/${userId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(userData),
    });

    console.log("üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);
    console.log("üì• Headers –æ—Ç–≤–µ—Ç–∞:", response.headers);

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const responseText = await response.text();
    console.log("üì• –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", responseText);

    if (!response.ok) {
      let errorData;
      try {
        errorData = JSON.parse(responseText);
      } catch {
        errorData = { message: responseText };
      }
      console.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", errorData);
      throw new Error(
        `–û—à–∏–±–∫–∞ ${response.status}: ${JSON.stringify(errorData)}`
      );
    }

    return JSON.parse(responseText);
  } catch (error) {
    console.log("‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
    throw error;
  }
};

// ===== –ó–ê–î–ê–ß–ò =====

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserTasks = async (userId) => {
  console.log("üîç –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

  const response = await fetch(`${API_URL}/tasks/user/${userId}`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:", errorData);
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á");
  }

  const tasks = await response.json();
  console.log("‚úÖ –ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã:", tasks);
  return tasks;
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
const createTask = async (taskData, userId) => {
  console.log("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", taskData);
  console.log("üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId, "–¢–∏–ø:", typeof userId);

  try {
    const requestBody = {
      title: taskData.title || "",
      content: taskData.content || "",
      priority: taskData.priority ?? 1,
      completed: false,
      user_id: parseInt(userId, 10), // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
    };

    console.log("üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:", requestBody);
    console.log(
      "üî¢ user_id –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
      requestBody.user_id,
      "–¢–∏–ø:",
      typeof requestBody.user_id
    );

    const response = await fetch("http://localhost:8000/tasks/", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    console.log("üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);

    if (!response.ok) {
      let errorData;
      try {
        errorData = await response.json();
        console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:", errorData);
      } catch (parseError) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É:", parseError);
        errorData = {
          detail: `HTTP ${response.status}: ${response.statusText}`,
        };
      }

      const errorMessage = Array.isArray(errorData.detail)
        ? errorData.detail
            .map((err) => `${err.loc?.join(".")}: ${err.msg}`)
            .join("; ")
        : errorData.detail ||
          `–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`;

      throw new Error(errorMessage);
    }

    const newTask = await response.json();
    console.log("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:", newTask);
    return newTask;
  } catch (error) {
    console.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
const updateTask = async (taskId, taskData) => {
  console.log("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:", taskId, taskData);

  const response = await fetch(`${API_URL}/tasks/${taskId}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(taskData),
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", errorData);
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏");
  }

  const updatedTask = await response.json();
  console.log("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", updatedTask);
  return updatedTask;
};

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
const toggleTaskStatus = async (taskId, currentStatus) => {
  const newStatus = !currentStatus;
  return updateTask(taskId, { completed: newStatus });
};

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò
const deleteTask = async (taskId) => {
  console.log("üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:", taskId);

  const response = await fetch(`${API_URL}/tasks/${taskId}`, {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", errorData);
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏");
  }

  console.log("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:", taskId);
  return { success: true, taskId };
};

// ‚úÖ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô
export {
  loginUser,
  registerUser,
  getUserData,
  updateUserData,
  getUserTasks,
  createTask,
  updateTask,
  deleteTask,
  toggleTaskStatus,
};
