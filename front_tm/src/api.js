const API_URL = "http://localhost:8000";

// ===== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø =====
const loginUser = async (username, password) => {
  const response = await fetch(`${API_URL}/login`, {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
    },
    body: new URLSearchParams({
      username,
      password,
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
  }

  const data = await response.json();
  return data;
};

const registerUser = async (username, password) => {
  const response = await fetch(`${API_URL}/register`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ username, password }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
  }

  const data = await response.json();
  return data;
};

// ===== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò =====
const getUserData = async (userId) => {
  const response = await fetch(`${API_URL}/users/${userId}`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }

  return response.json();
};

const updateUserData = async (userId, userData) => {
  const response = await fetch(`${API_URL}/users/${userId}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(userData),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }

  return response.json();
};

// ===== –ó–ê–î–ê–ß–ò =====

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserTasks = async (userId) => {
  console.log("üîç –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);

  const response = await fetch(`${API_URL}/tasks/user/${userId}`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:", errorData);
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á");
  }

  const tasks = await response.json();
  console.log("‚úÖ –ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã:", tasks);
  return tasks;
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
const createTask = async (taskData) => {
  console.log("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", taskData);

  const response = await fetch(`${API_URL}/tasks/`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(taskData),
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:", errorData);
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏");
  }

  const newTask = await response.json();
  console.log("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:", newTask);
  return newTask;
};

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
const updateTask = async (taskId, taskData) => {
  console.log("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:", taskId, taskData);

  const response = await fetch(`${API_URL}/tasks/${taskId}`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(taskData),
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", errorData);
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏");
  }

  const updatedTask = await response.json();
  console.log("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", updatedTask);
  return updatedTask;
};

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò
const deleteTask = async (taskId) => {
  console.log("üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:", taskId);

  const response = await fetch(`${API_URL}/tasks/${taskId}`, {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const errorData = await response.json();
    console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", errorData);
    throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏");
  }

  console.log("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:", taskId);
  return { success: true, taskId };
};

// ‚úÖ –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô
// –£–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫:
export {
  loginUser,
  registerUser,
  getUserData, // ‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∑–¥–µ—Å—å
  updateUserData,
  getUserTasks,
  createTask,
  updateTask,
  deleteTask,
};
